simulation 
import BooleanLogic;
import DataWriter;
import DataWriterConfig;
import FMI2;
import FMI2Component;
import Logger;
import Math;
{
 	int status = 0;
	Math math = null;
	Logger logger = null;
	DataWriter dataWriter = null;
	BooleanLogic booleanLogic = null;
	@mapFmu(KIN -> "{KIN}");
	FMI2 KIN = null;
	@mapFmu(ACT -> "{ACT}");
	FMI2 ACT = null;
	@mapFmu(RBMQ -> "{RBMQ}");
	FMI2 RBMQ = null;
	@mapInstance(RbmqFmu -> "RbmqFmu");
	FMI2Component RbmqFmu = null;
	@mapInstance(KinematicModel -> "KinematicModel");
	FMI2Component KinematicModel = null;
	@mapInstance(ActuationModel -> "ActuationModel");
	FMI2Component ActuationModel = null;
	try 
	{
		math = load("Math");
		if( ((((math == null)))) )
		{
				error "math IS NULL ";
		}
		logger = load("Logger");
		if( ((((logger == null)))) )
		{
				error "logger IS NULL ";
		}
		dataWriter = load("DataWriter");
		if( ((((dataWriter == null)))) )
		{
				error "dataWriter IS NULL ";
		}
		booleanLogic = load("BooleanLogic");
		if( ((((booleanLogic == null)))) )
		{
				error "booleanLogic IS NULL ";
		}
		KIN = load("FMI2", "77236337-210e-4e9c-8f2c-c1a0677db21b", "file:/home/hejersbo/model_swap_example/fmus/unifmu_bicycle_kinematic/");
		if( ((((KIN == null)))) )
		{
				error "KIN IS NULL ";
		}
		ACT = load("FMI2", "77236337-210e-4e9c-8f2c-c1a0677db21b", "file:/home/hejersbo/model_swap_example/fmus/unifmu_actuation_model/");
		if( ((((ACT == null)))) )
		{
				error "ACT IS NULL ";
		}
		RBMQ = load("FMI2", "{cfc65592-ffff-4563-9705-1581b6e7071c}", "file:/home/hejersbo/model_swap_example/fmus/rbmq_local/");
		if( ((((RBMQ == null)))) )
		{
				error "RBMQ IS NULL ";
		}
		RbmqFmu = RBMQ.instantiate("RbmqFmu", false, false);
		if( ((((RbmqFmu == null)))) )
		{
				error "RbmqFmu IS NULL ";
		}
		KinematicModel = KIN.instantiate("KinematicModel", false, false);
		if( ((((KinematicModel == null)))) )
		{
				error "KinematicModel IS NULL ";
		}
		ActuationModel = ACT.instantiate("ActuationModel", false, false);
		if( ((((ActuationModel == null)))) )
		{
				error "ActuationModel IS NULL ";
		}
		real STEP_SIZE = 0.1;
		real START_TIME = 0.0;
		real END_TIME = 20.0;
		int FMI_OK = 0;
		int FMI_DISCARD = 2;
		int FMI_ERROR = 3;
		int FMI_FATAL = 4;
		BooleanLogic booleanLogic1;
		try 
		{
			booleanLogic1 = load("BooleanLogic");
			if( (((booleanLogic1 == null))) )
			{
					error "Failed load of: booleanLogic1";
			}
			real rbmqfmuRealShare[2];
			real rbmqfmuRealIo[18];
			real actuationmodelRealShare[2];
			real actuationmodelRealIo[12];
			uint actuationmodelUintVref[12];
			real kinematicmodelRealIo[16];
			uint kinematicmodelUintVref[16];
			int rbmqfmuIntIo[18];
			string rbmqfmuStringIo[18];
			uint rbmqfmuUintVref[18];
			real fixed_end_time = 0.0;
			fixed_end_time = END_TIME;
			status = RbmqFmu.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setupExperiment' on 'RbmqFmu'";
			}
			status = KinematicModel.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", KinematicModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", KinematicModel);
					}
					error "Failed to 'setupExperiment' on 'KinematicModel'";
			}
			status = ActuationModel.setupExperiment(true, 0.1, START_TIME, true, END_TIME);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetupExperiment failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'setupExperiment' on 'ActuationModel'";
			}
			rbmqfmuUintVref[0] = 0;
			rbmqfmuStringIo[0] = "localhost";
			status = RbmqFmu.setString(rbmqfmuUintVref, 1, rbmqfmuStringIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setString' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 1;
			rbmqfmuIntIo[0] = 5672;
			status = RbmqFmu.setInteger(rbmqfmuUintVref, 1, rbmqfmuIntIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setInteger' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 2;
			rbmqfmuStringIo[0] = "guest";
			status = RbmqFmu.setString(rbmqfmuUintVref, 1, rbmqfmuStringIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setString' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 3;
			rbmqfmuStringIo[0] = "guest";
			status = RbmqFmu.setString(rbmqfmuUintVref, 1, rbmqfmuStringIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setString' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 4;
			rbmqfmuStringIo[0] = "linefollower.data.to_cosim";
			status = RbmqFmu.setString(rbmqfmuUintVref, 1, rbmqfmuStringIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setString' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 5;
			rbmqfmuIntIo[0] = 60;
			status = RbmqFmu.setInteger(rbmqfmuUintVref, 1, rbmqfmuIntIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setInteger' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 6;
			rbmqfmuIntIo[0] = 10;
			status = RbmqFmu.setInteger(rbmqfmuUintVref, 1, rbmqfmuIntIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setInteger' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 7;
			rbmqfmuIntIo[0] = 100;
			status = RbmqFmu.setInteger(rbmqfmuUintVref, 1, rbmqfmuIntIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setInteger' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 8;
			rbmqfmuIntIo[0] = 1;
			status = RbmqFmu.setInteger(rbmqfmuUintVref, 1, rbmqfmuIntIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetInteger failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setInteger' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 9;
			rbmqfmuStringIo[0] = "fmi_digital_twin_cd";
			status = RbmqFmu.setString(rbmqfmuUintVref, 1, rbmqfmuStringIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setString' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 10;
			rbmqfmuStringIo[0] = "direct";
			status = RbmqFmu.setString(rbmqfmuUintVref, 1, rbmqfmuStringIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setString' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 11;
			rbmqfmuStringIo[0] = "fmi_digital_twin_sh";
			status = RbmqFmu.setString(rbmqfmuUintVref, 1, rbmqfmuStringIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setString' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 12;
			rbmqfmuStringIo[0] = "direct";
			status = RbmqFmu.setString(rbmqfmuUintVref, 1, rbmqfmuStringIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setString' on 'RbmqFmu'";
			}
			rbmqfmuUintVref[0] = 13;
			rbmqfmuStringIo[0] = "linefollower.data.from_cosim";
			status = RbmqFmu.setString(rbmqfmuUintVref, 1, rbmqfmuStringIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetString failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'setString' on 'RbmqFmu'";
			}
			kinematicmodelUintVref[0] = 6;
			kinematicmodelRealIo[0] = 0.2;
			status = KinematicModel.setReal(kinematicmodelUintVref, 1, kinematicmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", KinematicModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", KinematicModel);
					}
					error "Failed to 'setReal' on 'KinematicModel'";
			}
			kinematicmodelUintVref[0] = 7;
			kinematicmodelRealIo[0] = 0.2;
			status = KinematicModel.setReal(kinematicmodelUintVref, 1, kinematicmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", KinematicModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", KinematicModel);
					}
					error "Failed to 'setReal' on 'KinematicModel'";
			}
			kinematicmodelUintVref[0] = 8;
			kinematicmodelRealIo[0] = 0.0;
			status = KinematicModel.setReal(kinematicmodelUintVref, 1, kinematicmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", KinematicModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", KinematicModel);
					}
					error "Failed to 'setReal' on 'KinematicModel'";
			}
			kinematicmodelUintVref[0] = 9;
			kinematicmodelRealIo[0] = 0.0;
			status = KinematicModel.setReal(kinematicmodelUintVref, 1, kinematicmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", KinematicModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", KinematicModel);
					}
					error "Failed to 'setReal' on 'KinematicModel'";
			}
			kinematicmodelUintVref[0] = 10;
			kinematicmodelRealIo[0] = 0.0;
			status = KinematicModel.setReal(kinematicmodelUintVref, 1, kinematicmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", KinematicModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", KinematicModel);
					}
					error "Failed to 'setReal' on 'KinematicModel'";
			}
			kinematicmodelUintVref[0] = 11;
			kinematicmodelRealIo[0] = 0.0;
			status = KinematicModel.setReal(kinematicmodelUintVref, 1, kinematicmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", KinematicModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", KinematicModel);
					}
					error "Failed to 'setReal' on 'KinematicModel'";
			}
			actuationmodelUintVref[0] = 0;
			actuationmodelRealIo[0] = 0.0;
			status = ActuationModel.setReal(actuationmodelUintVref, 1, actuationmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'setReal' on 'ActuationModel'";
			}
			actuationmodelUintVref[0] = 1;
			actuationmodelRealIo[0] = 0.84766;
			status = ActuationModel.setReal(actuationmodelUintVref, 1, actuationmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'setReal' on 'ActuationModel'";
			}
			actuationmodelUintVref[0] = 2;
			actuationmodelRealIo[0] = -0.834215;
			status = ActuationModel.setReal(actuationmodelUintVref, 1, actuationmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'setReal' on 'ActuationModel'";
			}
			actuationmodelUintVref[0] = 3;
			actuationmodelRealIo[0] = 0.99889;
			status = ActuationModel.setReal(actuationmodelUintVref, 1, actuationmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'setReal' on 'ActuationModel'";
			}
			actuationmodelUintVref[0] = 4;
			actuationmodelRealIo[0] = -0.0123;
			status = ActuationModel.setReal(actuationmodelUintVref, 1, actuationmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'setReal' on 'ActuationModel'";
			}
			actuationmodelUintVref[0] = 5;
			actuationmodelRealIo[0] = 0.05;
			status = ActuationModel.setReal(actuationmodelUintVref, 1, actuationmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'setReal' on 'ActuationModel'";
			}
			actuationmodelUintVref[0] = 11;
			actuationmodelRealIo[0] = 0.0;
			status = ActuationModel.setReal(actuationmodelUintVref, 1, actuationmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'setReal' on 'ActuationModel'";
			}
			status = RbmqFmu.enterInitializationMode();
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'enterInitializationMode' on 'RbmqFmu'";
			}
			status = KinematicModel.enterInitializationMode();
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", KinematicModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", KinematicModel);
					}
					error "Failed to 'enterInitializationMode' on 'KinematicModel'";
			}
			status = ActuationModel.enterInitializationMode();
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "EnterInitializationMode failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'enterInitializationMode' on 'ActuationModel'";
			}
			actuationmodelUintVref[0] = 8;
			status = ActuationModel.getReal(actuationmodelUintVref, 1, actuationmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'getReal' on 'ActuationModel'";
			}
			actuationmodelRealShare[0] = actuationmodelRealIo[0];
			kinematicmodelUintVref[0] = 1;
			kinematicmodelRealIo[0] = actuationmodelRealShare[0];
			status = KinematicModel.setReal(kinematicmodelUintVref, 1, kinematicmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", KinematicModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", KinematicModel);
					}
					error "Failed to 'setReal' on 'KinematicModel'";
			}
			actuationmodelUintVref[0] = 10;
			status = ActuationModel.getReal(actuationmodelUintVref, 1, actuationmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'getReal' on 'ActuationModel'";
			}
			actuationmodelRealShare[1] = actuationmodelRealIo[0];
			kinematicmodelUintVref[0] = 0;
			kinematicmodelRealIo[0] = actuationmodelRealShare[1];
			status = KinematicModel.setReal(kinematicmodelUintVref, 1, kinematicmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", KinematicModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", KinematicModel);
					}
					error "Failed to 'setReal' on 'KinematicModel'";
			}
			rbmqfmuUintVref[0] = 101;
			status = RbmqFmu.getReal(rbmqfmuUintVref, 1, rbmqfmuRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'getReal' on 'RbmqFmu'";
			}
			rbmqfmuRealShare[0] = rbmqfmuRealIo[0];
			actuationmodelUintVref[0] = 7;
			actuationmodelRealIo[0] = rbmqfmuRealShare[0];
			status = ActuationModel.setReal(actuationmodelUintVref, 1, actuationmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'setReal' on 'ActuationModel'";
			}
			rbmqfmuUintVref[0] = 102;
			status = RbmqFmu.getReal(rbmqfmuUintVref, 1, rbmqfmuRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'getReal' on 'RbmqFmu'";
			}
			rbmqfmuRealShare[1] = rbmqfmuRealIo[0];
			actuationmodelUintVref[0] = 6;
			actuationmodelRealIo[0] = rbmqfmuRealShare[1];
			status = ActuationModel.setReal(actuationmodelUintVref, 1, actuationmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'setReal' on 'ActuationModel'";
			}
			status = RbmqFmu.exitInitializationMode();
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'exitInitializationMode' on 'RbmqFmu'";
			}
			status = KinematicModel.exitInitializationMode();
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", KinematicModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", KinematicModel);
					}
					error "Failed to 'exitInitializationMode' on 'KinematicModel'";
			}
			status = ActuationModel.exitInitializationMode();
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "ExitInitializationMode failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'exitInitializationMode' on 'ActuationModel'";
			}
		}		finally 
		{
			if( (((booleanLogic1 != null))) )
			{
					unload(booleanLogic1);
					booleanLogic1 = null;
			}
		}
		BooleanLogic booleanLogic2;
		DataWriter dataWriter1;
		try 
		{
			dataWriter1 = load("DataWriter");
			if( (((dataWriter1 == null))) )
			{
					error "Failed load of: dataWriter1";
			}
			booleanLogic2 = load("BooleanLogic");
			if( (((booleanLogic2 == null))) )
			{
					error "Failed load of: booleanLogic2";
			}
			bool actuationmodelCurrentTimeFullStep = true;
			real actuationmodelCurrentTime = 0.0;
			bool kinematicmodelCurrentTimeFullStep = true;
			real kinematicmodelCurrentTime = 0.0;
			bool rbmqfmuCurrentTimeFullStep = true;
			real rbmqfmuCurrentTime = 0.0;
			real actuationmodelRealShare[3];
			real rbmqfmuRealShare[2];
			real kinematicmodelRealShare[4];
			real actuationmodelRealIo[12];
			uint actuationmodelUintVref[12];
			real kinematicmodelRealIo[16];
			uint kinematicmodelUintVref[16];
			real rbmqfmuRealIo[18];
			uint rbmqfmuUintVref[18];
			real jac_current_step_size = 0.0;
			real jac_step_size = 0.0;
			@TransferAs("START_TIME");
			real jac_current_communication_point = 0.0;
			real jac_end_time = 0.0;
			jac_current_step_size = STEP_SIZE;
			jac_step_size = STEP_SIZE;
			jac_current_communication_point = START_TIME;
			jac_end_time = END_TIME;
			string datawriter_headers[9] = { "{RBMQ}.RbmqFmu.speed" , "{RBMQ}.RbmqFmu.steering_angle" , "{KIN}.KinematicModel.x" , "{KIN}.KinematicModel.y" , "{KIN}.KinematicModel.psi" , "{KIN}.KinematicModel.v" , "{ACT}.ActuationModel.act_angle" , "{ACT}.ActuationModel.act_speed" , "{ACT}.ActuationModel.act_accelleration" };
			DataWriterConfig datawriter_configuration = dataWriter1.writeHeader(datawriter_headers);
			rbmqfmuUintVref[0] = 101;
			rbmqfmuUintVref[1] = 102;
			status = RbmqFmu.getReal(rbmqfmuUintVref, 2, rbmqfmuRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", RbmqFmu);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", RbmqFmu);
					}
					error "Failed to 'getReal' on 'RbmqFmu'";
			}
			kinematicmodelUintVref[0] = 2;
			kinematicmodelUintVref[1] = 3;
			kinematicmodelUintVref[2] = 4;
			kinematicmodelUintVref[3] = 5;
			status = KinematicModel.getReal(kinematicmodelUintVref, 4, kinematicmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", KinematicModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", KinematicModel);
					}
					error "Failed to 'getReal' on 'KinematicModel'";
			}
			actuationmodelUintVref[0] = 8;
			actuationmodelUintVref[1] = 9;
			actuationmodelUintVref[2] = 10;
			status = ActuationModel.getReal(actuationmodelUintVref, 3, actuationmodelRealIo);
			if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
			{
					if( (((status == FMI_ERROR))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
					}
					if( (((status == FMI_FATAL))) )
					{
							logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
					}
					error "Failed to 'getReal' on 'ActuationModel'";
			}
			kinematicmodelRealShare[0] = kinematicmodelRealIo[0];
			kinematicmodelRealShare[1] = kinematicmodelRealIo[1];
			kinematicmodelRealShare[2] = kinematicmodelRealIo[2];
			kinematicmodelRealShare[3] = kinematicmodelRealIo[3];
			rbmqfmuRealShare[0] = rbmqfmuRealIo[0];
			rbmqfmuRealShare[1] = rbmqfmuRealIo[1];
			actuationmodelRealShare[0] = actuationmodelRealIo[0];
			actuationmodelRealShare[1] = actuationmodelRealIo[1];
			actuationmodelRealShare[2] = actuationmodelRealIo[2];
			real fmu_communicationpoints[3];
			dataWriter1.writeDataPoint(datawriter_configuration, jac_current_communication_point, rbmqfmuRealShare[0], rbmqfmuRealShare[1], kinematicmodelRealShare[0], kinematicmodelRealShare[1], kinematicmodelRealShare[2], kinematicmodelRealShare[3], actuationmodelRealShare[0], actuationmodelRealShare[1], actuationmodelRealShare[2]);
			bool any_discards = false;
			while( ((((jac_current_communication_point + jac_current_step_size) < jac_end_time))) )
			{
				@Transfer();
				kinematicmodelUintVref[0] = 0;
				kinematicmodelUintVref[1] = 1;
				kinematicmodelRealIo[0] = actuationmodelRealShare[2];
				kinematicmodelRealIo[1] = actuationmodelRealShare[0];
				status = KinematicModel.setReal(kinematicmodelUintVref, 2, kinematicmodelRealIo);
				if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
				{
						if( (((status == FMI_ERROR))) )
						{
								logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", KinematicModel);
						}
						if( (((status == FMI_FATAL))) )
						{
								logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", KinematicModel);
						}
						error "Failed to 'setReal' on 'KinematicModel'";
				}
				actuationmodelUintVref[0] = 6;
				actuationmodelUintVref[1] = 7;
				actuationmodelRealIo[0] = rbmqfmuRealShare[1];
				actuationmodelRealIo[1] = rbmqfmuRealShare[0];
				status = ActuationModel.setReal(actuationmodelUintVref, 2, actuationmodelRealIo);
				if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
				{
						if( (((status == FMI_ERROR))) )
						{
								logger.log(4, "SetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
						}
						if( (((status == FMI_FATAL))) )
						{
								logger.log(4, "SetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
						}
						error "Failed to 'setReal' on 'ActuationModel'";
				}
				any_discards = false;
				status = RbmqFmu.doStep(jac_current_communication_point, jac_current_step_size, false);
				if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
				{
						if( (((status == FMI_ERROR))) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", RbmqFmu);
						}
						if( (((status == FMI_FATAL))) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", RbmqFmu);
						}
						error "Failed to 'doStep' on 'RbmqFmu'";
				}
				if( (((status != FMI_OK))) )
				{
						if( (((status == FMI_DISCARD))) )
						{
								status = RbmqFmu.getRealStatus(2, ref rbmqfmuCurrentTime);
								rbmqfmuCurrentTimeFullStep = false;
						}
				}
				else
				{
						rbmqfmuCurrentTime = jac_current_communication_point + jac_current_step_size;
						rbmqfmuCurrentTimeFullStep = true;
				}
				fmu_communicationpoints[0] = rbmqfmuCurrentTime;
				if( (((!rbmqfmuCurrentTimeFullStep))) )
				{
						logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "RbmqFmu", jac_current_communication_point, jac_current_step_size, rbmqfmuCurrentTime);
						any_discards = any_discards || !rbmqfmuCurrentTimeFullStep;
				}
				status = KinematicModel.doStep(jac_current_communication_point, jac_current_step_size, false);
				if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
				{
						if( (((status == FMI_ERROR))) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", KinematicModel);
						}
						if( (((status == FMI_FATAL))) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", KinematicModel);
						}
						error "Failed to 'doStep' on 'KinematicModel'";
				}
				if( (((status != FMI_OK))) )
				{
						if( (((status == FMI_DISCARD))) )
						{
								status = KinematicModel.getRealStatus(2, ref kinematicmodelCurrentTime);
								kinematicmodelCurrentTimeFullStep = false;
						}
				}
				else
				{
						kinematicmodelCurrentTime = jac_current_communication_point + jac_current_step_size;
						kinematicmodelCurrentTimeFullStep = true;
				}
				fmu_communicationpoints[1] = kinematicmodelCurrentTime;
				if( (((!kinematicmodelCurrentTimeFullStep))) )
				{
						logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "KinematicModel", jac_current_communication_point, jac_current_step_size, kinematicmodelCurrentTime);
						any_discards = any_discards || !kinematicmodelCurrentTimeFullStep;
				}
				status = ActuationModel.doStep(jac_current_communication_point, jac_current_step_size, false);
				if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
				{
						if( (((status == FMI_ERROR))) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_ERROR", ActuationModel);
						}
						if( (((status == FMI_FATAL))) )
						{
								logger.log(4, "DoStep failed on '%s' with status: FMI_FATAL", ActuationModel);
						}
						error "Failed to 'doStep' on 'ActuationModel'";
				}
				if( (((status != FMI_OK))) )
				{
						if( (((status == FMI_DISCARD))) )
						{
								status = ActuationModel.getRealStatus(2, ref actuationmodelCurrentTime);
								actuationmodelCurrentTimeFullStep = false;
						}
				}
				else
				{
						actuationmodelCurrentTime = jac_current_communication_point + jac_current_step_size;
						actuationmodelCurrentTimeFullStep = true;
				}
				fmu_communicationpoints[2] = actuationmodelCurrentTime;
				if( (((!actuationmodelCurrentTimeFullStep))) )
				{
						logger.log(1, "## FMU: '%s' DISCARDED step at sim-time: %f for step-size: %f and proposed sim-time: %.15f", "ActuationModel", jac_current_communication_point, jac_current_step_size, actuationmodelCurrentTime);
						any_discards = any_discards || !actuationmodelCurrentTimeFullStep;
				}
				kinematicmodelUintVref[0] = 2;
				kinematicmodelUintVref[1] = 3;
				kinematicmodelUintVref[2] = 4;
				kinematicmodelUintVref[3] = 5;
				status = KinematicModel.getReal(kinematicmodelUintVref, 4, kinematicmodelRealIo);
				if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
				{
						if( (((status == FMI_ERROR))) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", KinematicModel);
						}
						if( (((status == FMI_FATAL))) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", KinematicModel);
						}
						error "Failed to 'getReal' on 'KinematicModel'";
				}
				rbmqfmuUintVref[0] = 101;
				rbmqfmuUintVref[1] = 102;
				status = RbmqFmu.getReal(rbmqfmuUintVref, 2, rbmqfmuRealIo);
				if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
				{
						if( (((status == FMI_ERROR))) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", RbmqFmu);
						}
						if( (((status == FMI_FATAL))) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", RbmqFmu);
						}
						error "Failed to 'getReal' on 'RbmqFmu'";
				}
				actuationmodelUintVref[0] = 8;
				actuationmodelUintVref[1] = 9;
				actuationmodelUintVref[2] = 10;
				status = ActuationModel.getReal(actuationmodelUintVref, 3, actuationmodelRealIo);
				if( ((((status == FMI_ERROR) || (status == FMI_FATAL)))) )
				{
						if( (((status == FMI_ERROR))) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_ERROR", ActuationModel);
						}
						if( (((status == FMI_FATAL))) )
						{
								logger.log(4, "GetReal failed on '%s' with status: FMI_FATAL", ActuationModel);
						}
						error "Failed to 'getReal' on 'ActuationModel'";
				}
				kinematicmodelRealShare[0] = kinematicmodelRealIo[0];
				kinematicmodelRealShare[1] = kinematicmodelRealIo[1];
				kinematicmodelRealShare[2] = kinematicmodelRealIo[2];
				kinematicmodelRealShare[3] = kinematicmodelRealIo[3];
				rbmqfmuRealShare[0] = rbmqfmuRealIo[0];
				rbmqfmuRealShare[1] = rbmqfmuRealIo[1];
				actuationmodelRealShare[0] = actuationmodelRealIo[0];
				actuationmodelRealShare[1] = actuationmodelRealIo[1];
				actuationmodelRealShare[2] = actuationmodelRealIo[2];
				if( (((!any_discards))) )
				{
						jac_current_communication_point = jac_current_communication_point + jac_current_step_size;
						dataWriter1.writeDataPoint(datawriter_configuration, jac_current_communication_point, rbmqfmuRealShare[0], rbmqfmuRealShare[1], kinematicmodelRealShare[0], kinematicmodelRealShare[1], kinematicmodelRealShare[2], kinematicmodelRealShare[3], actuationmodelRealShare[0], actuationmodelRealShare[1], actuationmodelRealShare[2]);
						jac_current_step_size = jac_step_size;
				}
			}
			dataWriter1.close();
		}		finally 
		{
			if( (((dataWriter1 != null))) )
			{
					unload(dataWriter1);
					dataWriter1 = null;
			}
			if( (((booleanLogic2 != null))) )
			{
					unload(booleanLogic2);
					booleanLogic2 = null;
			}
		}
		RbmqFmu.terminate();
		KinematicModel.terminate();
		ActuationModel.terminate();
	}	finally 
	{
		if( ((((RbmqFmu != null)))) )
		{
				RBMQ.freeInstance(RbmqFmu);
				RbmqFmu = null;
		}
		if( ((((KinematicModel != null)))) )
		{
				KIN.freeInstance(KinematicModel);
				KinematicModel = null;
		}
		if( ((((ActuationModel != null)))) )
		{
				ACT.freeInstance(ActuationModel);
				ActuationModel = null;
		}
		if( ((((KIN != null)))) )
		{
				unload(KIN);
				KIN = null;
		}
		if( ((((ACT != null)))) )
		{
				unload(ACT);
				ACT = null;
		}
		if( ((((RBMQ != null)))) )
		{
				unload(RBMQ);
				RBMQ = null;
		}
		if( ((((math != null)))) )
		{
				unload(math);
				math = null;
		}
		if( ((((logger != null)))) )
		{
				unload(logger);
				logger = null;
		}
		if( ((((dataWriter != null)))) )
		{
				unload(dataWriter);
				dataWriter = null;
		}
		if( ((((booleanLogic != null)))) )
		{
				unload(booleanLogic);
				booleanLogic = null;
		}
	}
}